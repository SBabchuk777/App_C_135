name: Test, Build, and Deploy with GameCI

concurrency: unity

on: [workflow_dispatch]

jobs:
  buildWithLinux:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          #- Android
          - iOS
    outputs:
      buildVersion: ${{ steps.build.outputs.buildVersion }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      
      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      
      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-buildLinux-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-buildLinux-${{ matrix.targetPlatform }}-
      
      - name: Free Disk Space
        if: matrix.targetPlatform == 'Android' || matrix.targetPlatform == 'StandaloneLinux64'
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          large-packages: false
      
      - name: Build Unity Project
        id: build
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          
      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          path: build/${{ matrix.targetPlatform }}
          name: cgs-${{ matrix.targetPlatform }}


  deployToAppStore:
    name: Deploy to the App Store
    runs-on: macos-latest
    needs: buildWithLinux
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Download iOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: cgs-iOS
          path: build/iOS
            
      - name: Fix File Permissions and Run Fastlane
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          
          APPLE_TEAM_NAME: "VOLYNTABAK, TOV"
          
          MATCH_REPOSITORY: ${{ secrets.MATCH_REPOSITORY }}
          MATCH_DEPLOY_KEY: ${{ secrets.MATCH_DEPLOY_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

          MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PAT }}
          
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}
          
          IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}
          IOS_BUNDLE_ID: com.TestCIRealProject.TestCIRealProject
          PROJECT_NAME: TestCIRealProject
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${MATCH_DEPLOY_KEY}"
          find $IOS_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          find $IOS_BUILD_PATH -type f -iname "usymtool" -exec chmod +x {} \;
          bundle install
          bundle exec fastlane ios release
        
